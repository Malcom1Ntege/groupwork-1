#include <iostream>//for input output operations
#include <fstream>//
#include <sstream>
#include <string>
#include <vector>// to store
#include <map>
#include <algorithm>//enables the complete logic of the program

using namespace std;
//Structures that hold student details and activity details
struct Student {
    string firstname;
    string surname;
    string gender;
    int age;
    char group;  // Group can be A, B, or C
    vector<string> activities;  // Stores activities
};

struct Activity {
    string name;
    int max_capacity;
    int male_count;
    int female_count;
    vector<string> members;//stores activities taken by students
};
//Global variables
vector<Student> students;//store
map<string, Activity> sports;  // Map for sports activities
map<string, Activity> clubs;   // stores all the activities

//Function to Save Students to a CSV file
void saveStudents(const string& filename) {
    ofstream file(filename);//to write to the files
    if (!file.is_open()) {
        cerr << "Error opening file for writing!" << endl;
        return;
    }
    file << "First Name,Surname,Gender,Age,Group,Activities" << endl;
    for (const auto& student : students) {
        file << student.firstname << ","
             << student.surname << ","
             << student.gender << ","
             << student.age << ","
             << student.group;
        for (const auto& activity : student.activities) {
            file << "," << activity;
        }
        file << endl;
    }
    file.close();

//Function to load Students from CSV file
void loadStudents(const string& filename) {
    ifstream file(filename);//used to read files
    if (!file.is_open()) {
        cerr << "Error opening file for reading!" << endl;
        return;
    }
    string line;
    //extract data from stringstream
    getline(file, line);  // Read and discard the header line
    while (getline(file, line)) {
        stringstream ss(line);
        Student student;
        string item;
        getline(ss, student.firstname, ',');//extract data from stringstream
        getline(ss, student.surname, ',');
        getline(ss, student.gender, ',');//delimeter to extract each activity and add it to the student activity vector
        ss >> student.age;//extract age as an integer
        ss.ignore();
        ss >> student.group;//extract group as an character
        ss.ignore();
        while (getline(ss, item, ',')) {
            student.activities.push_back(item);
        }
        students.push_back(student);
    }
    file.close();
}
//save to the file
void saveActivities(const string& filename) {
    ofstream file(filename);
    if (!file.is_open()) {
        cerr << "Error opening file for writing!" << endl;
        return;
    }
    file << "Activity Name,Max Capacity,Male Count,Female Count,Members" << endl;
    for (const auto& [name, activity] : sports) {
        file << activity.name << ","
             << activity.max_capacity << ","
             << activity.male_count << ","
             << activity.female_count;
        for (const auto& member : activity.members) {
            file << "," << member;
        }
        file << endl;
    }
    for (const auto& [name, activity] : clubs) {
        file << activity.name << ","
             << activity.max_capacity << ","
             << activity.male_count << ","
             << activity.female_count;
        for (const auto& member : activity.members) {
            file << "," << member;
        }
        file << endl;
    }
    file.close();
}

void loadActivities(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Error opening file for reading!" << endl;
        return;
    }
    string line;
    getline(file, line);  // Read and discard the header line
    while (getline(file, line)) {
        stringstream ss(line);
        Activity activity;
        string item;
        getline(ss, activity.name, ',');
        ss >> activity.max_capacity;
        ss.ignore();
        ss >> activity.male_count;
        ss.ignore();
        ss >> activity.female_count;
        ss.ignore();
        while (getline(ss, item, ',')) {
            activity.members.push_back(item);
        }
        if (activity.max_capacity == 20) {
            sports[activity.name] = activity;
        } else {
            clubs[activity.name] = activity;
        }
    }
    file.close();
}
//Function to add student
void addStudent() {
    Student student;
    cout << "Enter first name: ";
    cin >> student.firstname;
    cout << "Enter surname: ";
    cin >> student.surname;
    cout << "Enter gender (Male/Female): ";
    cin >> student.gender;
    cout << "Enter age: ";
    cin >> student.age;
    cout << "Enter group (A/B/C): ";
    cin >> student.group;

    int sportCount = 0;
    int clubCount = 0;

    while (sportCount + clubCount < 3) {
        string activity;
        cout<<"Enter activity (sport or club) " << sportCount + clubCount + 1 << ": ";
        cin >> activity;
//it checks to see different conditions are being met
        if (sports.find(activity) != sports.end()) {
            Activity &act = sports[activity];

            if (act.members.size() >= act.max_capacity) {
                cout << "This sport is full. Please choose another one." << endl;
                continue;
            }

            if (student.gender == "Male" && act.male_count >= 0.75 * act.max_capacity) {
                cout << "This sport cannot have more than 75% males." << endl;
                continue;
            }

            if (student.gender == "Female" && act.female_count >= 0.75 * act.max_capacity) {
                cout << "This sport cannot have more than 75% females." << endl;
                continue;
            }

            if (find(student.activities.begin(), student.activities.end(), activity) != student.activities.end()) {
                cout << "You have already chosen this activity. Please choose another one." << endl;
                continue;
            }

            if (sportCount >= 1) {
                cout << "You can only choose one sport. Please choose a club." << endl;
                continue;
            }

            student.activities.push_back(activity);
            act.members.push_back(student.firstname + " " + student.surname);
            if (student.gender == "Male") {
                act.male_count++;
            } else {
                act.female_count++;
            }
            sportCount++;
            cout << "Sport added successfully." << endl;
        } else if (clubs.find(activity) != clubs.end()) {
            Activity &act = clubs[activity];

            if (act.members.size() >= act.max_capacity) {
                cout << "This club is full. Please choose another one." << endl;
                continue;
            }

            if (find(student.activities.begin(), student.activities.end(), activity) != student.activities.end()) {
                cout << "You have already chosen this activity. Please choose another one." << endl;
                continue;
            }

            if (clubCount >= 3) {
                cout << "You can only choose a maximum of 3 clubs." << endl;
                continue;
            }

            student.activities.push_back(activity);
            act.members.push_back(student.firstname + " " + student.surname);
            if (student.gender == "Male") {
                act.male_count++;
            } else {
                act.female_count++;
            }
            clubCount++;
            cout << "Club added successfully." << endl;
        } else {
            cout << "Activity not found. Please enter a valid activity." << endl;
        }
    }

    students.push_back(student);
}
//Function to view Students,Clubs and Sports
void viewStudents() {
    for (const auto& student : students) {
        cout << student.firstname << " " << student.surname << ", "
             << student.gender << ", " << student.age << ", Group "
             << student.group << ", Activities: ";
        for (const auto& activity : student.activities) {
            cout << activity << " ";
        }
        cout << endl;
    }
}

void viewClubs() {
    for (const auto& [name, activity] : clubs) {
        cout << "Club: " << activity.name << ", Capacity: "
             << activity.max_capacity << ", Male Count: " << activity.male_count
             << ", Female Count: " << activity.female_count << endl;
    }
}

void viewSports() {
    for (const auto& [name, activity] : sports) {
        cout << "Sport: " << activity.name << ", Capacity: "
             << activity.max_capacity << ", Male Count: " << activity.male_count
             << ", Female Count: " << activity.female_count << endl;
    }
}
//Function to show Menu
void showMenu() {
    int choice;
    while (true) {
        cout << "\nMenu\n";
        cout << "1. Add Student\n";
        cout << "2. View Students\n";
        cout << "3. View Clubs\n";
        cout << "4. View Sports\n";
        cout << "5. Save Data to CSV\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
//to handle different cases used on user choice
        switch (choice) {
            case 1:
                addStudent();
                break;
            case 2:
                viewStudents();
                break;
            case 3:
                viewClubs();
                break;
            case 4:
                viewSports();
                break;
            case 5:
                saveStudents("students.csv");
                saveActivities("activities.csv");
                break;
            case 6:
                return;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    }
}
//Main Function
int main() {
        //initializes the activites
    sports["Rugby"] = {"Rugby", 20, 0, 0, {}};
    sports["Athletics"] = {"Athletics", 20, 0, 0, {}};
    sports["Swimming"] = {"Swimming", 20, 0, 0, {}};
    sports["Soccer"] = {"Soccer", 20, 0, 0, {}};
    clubs["Journalism"] = {"Journalism", 60, 0, 0, {}};
    clubs["RedCrossSociety"] = {"RedCrossSoceity", 60, 0, 0, {}};
    clubs["AISEC"] = {"AISEC", 60, 0, 0, {}};
    clubs["Business"] = {"Business", 60, 0, 0, {}};
    clubs["ComputerScience"] = {"ComputerScience", 60, 0, 0, {}};

    showMenu();
    //reads activity data from file and passes it to be stored in the appropriate data structure
    loadStudents("students.csv");
    loadActivities("activities.csv");

    return 0;
}#include <iostream>

int main()
{
    std::cout << "Hello, World!" << std::endl;
    return 0;
}
