#include <iostream>//for input output operations
#include <fstream>//
#include <sstream>
#include <string>
#include <vector>// to store
#include <map>
#include <algorithm>//enables the complete logic of the program

using namespace std;
//Structures that hold student details and activity details
struct Student {
    string firstname;
    string surname;
    string gender;
    int age;
    char group;  // Group can be A, B, or C
    vector<string> activities;  // Stores activities
};

struct Activity {
    string name;
    int max_capacity;
    int male_count;
    int female_count;
    vector<string> members;//stores activities taken by students
};
//Global variables
vector<Student> students;//store
map<string, Activity> sports;  // Map for sports activities
map<string, Activity> clubs;   // stores all the activities

//Function to Save Students to a CSV file
void saveStudents(const string& filename) {
    ofstream file(filename);//to write to the files
    if (!file.is_open()) {
        cerr << "Error opening file for writing!" << endl;
        return;
    }
    file << "First Name,Surname,Gender,Age,Group,Activities" << endl;
    for (const auto& student : students) {
        file << student.firstname << ","
             << student.surname << ","
             << student.gender << ","
             << student.age << ","
             << student.group;
        for (const auto& activity : student.activities) {
            file << "," << activity;
        }
        file << endl;
    }
    file.close();

//Function to load Students from CSV file
void loadStudents(const string& filename) {
    ifstream file(filename);//used to read files
    if (!file.is_open()) {
        cerr << "Error opening file for reading!" << endl;
        return;
    }
    string line;
    //extract data from stringstream
    getline(file, line);  // Read and discard the header line
    while (getline(file, line)) {
        stringstream ss(line);
        Student student;
        string item;
        getline(ss, student.firstname, ',');//extract data from stringstream
        getline(ss, student.surname, ',');
        getline(ss, student.gender, ',');//delimeter to extract each activity and add it to the student activity vector
        ss >> student.age;//extract age as an integer
        ss.ignore();
        ss >> student.group;//extract group as an character
        ss.ignore();
        while (getline(ss, item, ',')) {
            student.activities.push_back(item);
        }
        students.push_back(student);
    }
    file.close();
}
//save to the file
void saveActivities(const string& filename) {
    ofstream file(filename);
    if (!file.is_open()) {
        cerr << "Error opening file for writing!" << endl;
        return;
    }
    file << "Activity Name,Max Capacity,Male Count,Female Count,Members" << endl;
    for (const auto& [name, activity] : sports) {
        file << activity.name << ","
             << activity.max_capacity << ","
             << activity.male_count << ","
             << activity.female_count;
        for (const auto& member : activity.members) {
            file << "," << member;
        }
        file << endl;
    }
    for (const auto& [name, activity] : clubs) {
        file << activity.name << ","
             << activity.max_capacity << ","
             << activity.male_count << ","
             << activity.female_count;
        for (const auto& member : activity.members) {
            file << "," << member;
        }
        file << endl;
    }
    file.close();
}

void loadActivities(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Error opening file for reading!" << endl;
        return;
    }
    string line;
    getline(file, line);  // Read and discard the header line
    while (getline(file, line)) {
        stringstream ss(line);
        Activity activity;
        string item;
        getline(ss, activity.name, ',');
        ss >> activity.max_capacity;
        ss.ignore();
        ss >> activity.male_count;
        ss.ignore();
        ss >> activity.female_count;
        ss.ignore();
        while (getline(ss, item, ',')) {
            activity.members.push_back(item);
        }
        if (activity.max_capacity == 20) {
            sports[activity.name] = activity;
        } else {
            clubs[activity.name] = activity;
        }
    }
    file.close();
}
//Function to add student
void addStudent() {
    Student student;
    cout << "Enter first name: ";
    cin >> student.firstname;
    cout << "Enter surname: ";
    cin >> student.surname;
    cout << "Enter gender (Male/Female): ";
    cin >> student.gender;
    cout << "Enter age: ";
    cin >> student.age;
    cout << "Enter group (A/B/C): ";
    cin >> student.group;

    int sportCount = 0;
    int clubCount = 0;

    while (sportCount + clubCount < 3) {
        string activity;
        cout<<"Enter activity (sport or club) " << sportCount + clubCount + 1 << ": ";
        cin >> activity;
